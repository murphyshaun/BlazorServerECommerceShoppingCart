@page "/category"

@using Shop.DataModels.CustomModels;
@using Shop.Admin.Services;
@using Shop.Common.Constant;

@inject ProtectedSessionStorage sessionStorage;
@inject IAdminPanelService adminPanelService;

<style>
	.modal {
		position: fixed;
		z-index: 1;
		padding-top: 100px;
		left: 0;
		top: 0;
		width: 100%;
		height: 100%;
		overflow: hidden;
		background-color: rgba(0, 0, 0, 0.4);
		display: block;
	}

	.modal-content {
		background-color: #fefefe;
		margin: auto;
		padding: 20px;
		border: 1px solid #888;
		width: 50%;
		overflow: hidden;
	}

	.close {
		color: #aaaaaa;
		float: right;
		font-size: 28px;
		font-weight: bold;
	}

	.close:hover,
	.close:focus {
		color: #000;
		text-decoration: none;
		cursor: pointer;
	}

</style>

@if (categoryModel == null)
{
	<p><em>Loading...</em></p>	
}
else
{
	<div class="card">
		<h4 class="card-header">Category</h4>

		<div class="card-body">
			<EditForm Model="@categoryModel" OnValidSubmit="SaveCategory">
				<DataAnnotationsValidator />

				<div class="form-row">
					<div class="from-group col-5">
						<label>Name: </label>
						<InputText @bind-Value="categoryModel.Name" class="form-control" />
						<ValidationMessage For="@(() => categoryModel.Name)" />
					</div>
				</div>
				
				<div class="text-left">
					<input type="submit" class="btn btn-primary" value="Save" />
					<input type="button" class="btn btn-primary" value="Clear" @onclick="ClearForm"/>
				</div>
			</EditForm>
		</div>

		<div class="card-body bg-dark">
			@if (categoryList == null) {
				<p><em>Loading...</em></p>
			}
			else
			{
				<table class="table table-striped table-bordered bg-light">
					<thead>
						<tr>
							<th style="width: 15px;">Sr.No</th>
							<th>Category Name</th>
							<th style="width: 80px;">Edit</th>
							<th style="width: 90px;">Delete</th>
						</tr>
					</thead>
					<tbody>
						@foreach (var (index, category) in categoryList.Select((category, idex) => (idex + 1, category)))
						{
							<tr>
								<td>@index</td>
								<td>@category.Name</td>
								<td><input type="button" class="btn btn-primary" value="Edit" @onclick="(() => EditCategoryButtonOnClick(category))" /></td>
								<td><input type="button" class="btn btn-primary" value="Delete" @onclick="(() => DeleteCategoryButtonOnClick(category))" /></td>
							</tr>
						}
					</tbody>
				</table>
			}
		</div>
	</div>
}

@if(isShowEditPopup)
{
	<div class="modal">
		<div class="modal-content">
			<div class="modal-header">
				<h5>Update Category</h5>
				<span class="close" @onclick="ToggleEditPopup">&times;</span>
			</div>

			<div class="modal-body">
				<EditForm Model="@categoryToUpdate" OnInvalidSubmit="HandleUpdateCategory">
					<DataAnnotationsValidator />
					<div class="form-row">
						<div class="from-group col-5">
							<label>Name: </label>
							<InputText @bind-Value="categoryToUpdate.Name" class="form-control" />
							<ValidationMessage For="@(() => categoryToUpdate.Name)" />
						</div>
					</div>
				</EditForm>
			</div>

			<div class="modal-footer">
				<input type="button" class="btn btn-primary" value="Update" @onclick="HandleUpdateCategory" />
				<input type="button" class="btn btn-primary" value="Cancel" @onclick="ToggleEditPopup" />
			</div>
		</div>
	</div>
}

@if(isShowDeletePopup)
{
	<div class="modal">
		<div class="modal-content">
			<div class="modal-header">
				<h5>Delete Category</h5>
				<span class="close" @onclick="ToggleDeletePopup">&times;</span>
			</div>

			<div class="modal-body">
				Are you Sure you want to Delete <span style="background-color: yellow;">@categoryToDelete.Name?</span> Category
			</div>

			<div class="modal-footer">
				<input type="button" class="btn btn-primary" value="Yes" @onclick="HandleDeleteCategory" />
				<input type="button" class="btn btn-primary" value="No" @onclick="ToggleDeletePopup" />
			</div>
		</div>
	</div>
}

@if (isSuccessPopup)
{
	<div class="modal">
		<div class="modal-content">
			<div class="modal-header">
				<h5>Alert</h5>
				<span class="close" @onclick="ToggleSuccessPopup">&times;</span>
			</div>

			<div class="modal-body">
				@message
			</div>

			<div class="modal-footer">
				<input type="button" class="btn btn-primary" value="Close" @onclick="ToggleSuccessPopup" />
			</div>
		</div>
	</div>
}

@code {
	[CascadingParameter]
	public EventCallback notify { get; set; }

	public CategoryModel categoryModel { get; set; }
	public CategoryModel categoryToDelete { get; set; }
	public CategoryModel categoryToUpdate { get; set; }
	public List<CategoryModel> categoryList { get; set; }

	public bool isSuccessPopup { get; set; }
	public bool isShowDeletePopup { get; set; }
	public bool isShowEditPopup { get; set; }
	public string message { get; set; }

	protected override async Task OnAfterRenderAsync(bool firstRender)
	{
		if (firstRender)
			await notify.InvokeAsync();
	}

	protected override async Task OnInitializedAsync()
	{
		categoryModel = new CategoryModel();
		await GetCategories();
	}

	private async Task SaveCategory()
	{
		await adminPanelService.SaveCategory(categoryModel);

		message = MessageManager.CATEGORY_ADD_SECCESS;

		ToggleSuccessPopup();

		await GetCategories();

		ClearForm();
	}

	private async Task GetCategories()
	{
		categoryList = await adminPanelService.GetCategories();
	}

	private void ClearForm()
	{
		categoryModel = new CategoryModel();
	}

	private void EditCategoryButtonOnClick(CategoryModel category)
	{
		categoryToUpdate = category;
		ToggleEditPopup();
	}

	private void DeleteCategoryButtonOnClick(CategoryModel category)
	{
		categoryToDelete = category;
		ToggleDeletePopup();
	}

	private async Task HandleUpdateCategory()
	{
		var flag = await adminPanelService.UpdateCategory(categoryToUpdate);
		
		ToggleEditPopup();

		message = flag ? MessageManager.CATEGORY_UPDATE_SECCESS : MessageManager.CATEGORY_UPDATE_FAIL;

		ToggleSuccessPopup();
		categoryToUpdate = new CategoryModel();
		await GetCategories();
	}

	private async Task HandleDeleteCategory()
	{
		var flag = await adminPanelService.DeleteCategory(categoryToDelete);
		ToggleDeletePopup();

		message = flag ? MessageManager.CATEGORY_DELETE_SECCESS : MessageManager.CATEGORY_DELETE_FAIL;

		ToggleSuccessPopup();
		categoryToDelete = new CategoryModel();
		await GetCategories();
	}

	private void ToggleSuccessPopup() => isSuccessPopup = !isSuccessPopup;

	private void ToggleDeletePopup() => isShowDeletePopup = !isShowDeletePopup;

	private void ToggleEditPopup() => isShowEditPopup = !isShowEditPopup;
}
