@page "/login"
@using Shop.DataModels.CustomModels;
@using Shop.Admin.Services;

@inject ProtectedSessionStorage sessionStorage;
@inject IAdminPanelService adminPanelService;
@inject NavigationManager navManager;

<style>
	.loginBox {
		font-family: 'Open Sans', sans-serif;
		width: 100%;
		text-align: center;
		margin: 20px 0 20px 0;
	}

	p {
		font-size: 12px;
		text-decoration: none;
		color: #ffffff;
	}

	h1 {
		font-size: 1.5em;
		color: #525252;
	}

	.box {
		background: white;
		width: 300px;
		border-radius: 6px;
		margin: 0 auto;
		padding: 0 0 10px 0;
		border: 1px solid #2877e9;
	}

	.email {
		background: #ffffff;
		border: 1px solid #ccc;
		border-bottom: 2px solid #ccc;
		padding: 8px;
		width: 250px;
		color: #525252;
		margin-top: 10px;
		font-size: 1em;
		border-radius: 4px;
	}

	.password {
		border-radius: 4px;
		background: #ecf0f1;
		border: 1px solid #ccc;
		padding: 8px;
		width: 250px;
		font-size: 1em;
	}
</style>

<div style="min-height: 400px;">
	<div class="loginBox">
		<div class="box">
			<br />

			<h1>Admin Panel</h1>

			@if(loginModel != null)
			{
				<EditForm Model="@loginModel" OnValidSubmit="LoginOnClick">
					<DataAnnotationsValidator />

					<InputText type="email" name="email" class="email" placeholder="email" @bind-Value="loginModel.Email" autocomplete="off"/>
					<ValidationMessage For="@(() => loginModel.Email)" />

					<InputText type="password" name="password" class="password" placeholder="password" @bind-Value="loginModel.Password" />
					<ValidationMessage For="@(() => loginModel.Password)" />
					
					<br /><br />
						
					<input type="submit" class="btn-primary" value="Login" />
				</EditForm>
			}

		</div>

		<div>
			<br />
			<br />
			<p style="color: #e52e50;">
				<h4>@alertMessage</h4>
			</p>
		</div>

	</div>
</div>

@code {
	[CascadingParameter]
	public EventCallback notify { get; set; }

	public LoginModel loginModel { get; set; }
	public string alertMessage { get; set; }

	protected override Task OnInitializedAsync()
	{
		loginModel = new LoginModel();
		return base.OnInitializedAsync();
	}

	private async Task LoginOnClick()
	{
		var response = await adminPanelService.LoginAdmin(loginModel);

		if (response.Status)
		{
			var userResponse = response.Message.Split("|");
			await sessionStorage.SetAsync("adminKey", userResponse[0]);
			await sessionStorage.SetAsync("adminName", userResponse[1]);
			await sessionStorage.SetAsync("adminEmail", userResponse[2]);

			await notify.InvokeAsync();

			navManager.NavigateTo("/");
		}
		else
		{
			alertMessage = response.Message;
		}

	}
}
